<?php

namespace App\Http\Controllers\Auth;

use App\User;
use Validator;
use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\RegistersUsers;
use Illuminate\Http\Request;
use App\Role;

class RegisterController extends Controller
{
   /*
   |--------------------------------------------------------------------------
   | Register Controller
   |--------------------------------------------------------------------------
   |
   | This controller handles the registration of new users as well as their
   | validation and creation. By default this controller uses a trait to
   | provide this functionality without requiring any additional code.
   |
   */

   use RegistersUsers;

   /**
    * Where to redirect users after login / registration.
    *
    * @var string
    */
   protected $redirectTo = '/home';

   /**
    * Create a new controller instance.
    *
    * @return void
    */
   public function __construct()
   {
       //$this->middleware('guest');
        $this->middleware('auth');
   }

   /**
    * Get a validator for an incoming registration request.
    *
    * @param  array  $data
    * @return \Illuminate\Contracts\Validation\Validator
    */
   protected function validator(array $data)
   {
       return Validator::make($data, [
           'name' => 'required|max:255',
           'email' => 'required|email|max:255|unique:users',
           'password' => 'required|min:6|confirmed',
           'role_id'=>'required',
       ]);
   }

   /**
    * Create a new user instance after a valid registration.
    *
    * @param  array  $data
    * @return User
    */
   protected function create(array $data)
   {

       return User::create([
           'name' => $data['name'],
           'email' => $data['email'],
           'password' => bcrypt($data['password']),
           'role_id' => $data['role_id'],
       ]);
   }

   public function list()
   {
     $users = User::select('users.id','users.name','users.email','users.role_id','roles.display_name as role_name')
     ->join('roles','roles.id','=','users.role_id')
     ->where(['roles.deleted_at'=>NULL,'users.deleted_at'=>NULL])->orderBy('users.id','desc')->get();
       return view('users.list',compact('users'));
   }

    public function edit(Request $request, $id)
   {
       $users = User::select('id','name','email','role_id')->where(['deleted_at'=>NULL,'id'=>$id])->first();
       $roles_list = Role::select('id','name')->where('deleted_at',NULL)->get();
       $is_update_url = 1;
       return view('auth.register',compact('users','is_update_url','roles_list'));
   }

    public function update(Request $request, $id)
   {
      if(isset($id) && !empty($id)) {

       $update= User::where('id',$id)->update(['name'=>$request->name,'email'=>$request->email,'role_id'=>$request->role_id]);

           if($update) {
               return redirect('/users')->with('success', 'Users Successfully Updated.');
           } else {
               return redirect('/users')->with('danger', 'Something went wrong while updating records.');
           }

      } else {

       return redirect('/users')->with('danger', 'Id not found.');
      }

   }

   /**
    * Remove the specified resource from storage.
    *
    * @param  int  $id
    * @return \Illuminate\Http\Response
    */
   public function destroy($id)
   {
       if(isset($id) && !empty($id)) {

       $delete_data = User::where('id',$id)->delete();

           if(isset($delete_data) && !empty($delete_data)) {

             return redirect('/users')->with('success', 'User Successfully Deleted.');

           } else {

              return redirect('/users')->with('danger', 'Something went wrong while deleteing data.');
           }

      } else {
       return redirect('/users')->with('danger', 'Id not found.');
      }

   }
}

<?php

/**
 * UIDAI
 *
 * PHP Version 7.1
 * 
 * @category  Role
 * @author  Choice Tech Lab <contact@choicetechlab.com>
 * @copyright 2017-2018 Choice Tech Lab (https://choicetechlab.com)
 * @license  https://choicetechlab.com/licenses/ctl-license.php CTL General Public License
 * @version  1.0.1
 * @package App\Http\Controllers\RolesController
 * @link  https://choicetechlab.com/
 */

namespace App\Http\Controllers;

use App\Http\Requests;
use App\Http\Controllers\Controller;
use App\Role;
use App\Permission;
use App\Entity;
use App\EntityRoleMapper;
use Illuminate\Http\Request;
use App\Department;
use App\PermissionMapper;
use App\PermissionRole;
use Auth;
use Illuminate\Support\Facades\Log;
use App\Exceptions\Handler;
/**
 * This class provides a all operation to manage the Role data.
 *
 * The RolesController is responsible for managing the basic details require for genarating the Role report.
 * 
 */

class RolesController extends Controller
{
    public $user_id,$user;
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        //$this->middleware('auth');
        $this->middleware(function ($request, $next) {
        $this->user= Auth::user();
        $this->user_id=Auth::id();
        return $next($request);

    });
    }

    /**
     * Display a listing of the Roles, with name, department id, etc. Also provide actions to edit,delete.
     *
     * @return \Illuminate\Http\Response

     * This Function Provide the list of all Roles Data.
     *  Pseudo Steps: <br>
     * 1)Create view to list down the coulmns.<br>
     * 2) Create Model and add table,list down table coulmns, and use soft delete class<br>
     * 3) Retreive records in Controller by accessing Model with scope resolution operator.<br>
     * 4) Store result in variable and pass the variable to view of listing.<br>
     * 5) Foreach this varaible in listing View to fetch each record from table with actions to be performed.<br>
     * 
     * @param mixed[] $request Request structure to get the post data for pagination like limit and offset.
     * 
     * @var array $roles to fetch data from model
     * @var int $limit Should contain a number for limit of record by default it is 10.
     * @var int $offset Should contain a number for offset of record by default it is 0.
     * 
     * @return json response for Roles list.
     
     */
    public function index(Request $request)
    {   
    try {  
            $keyword = $request->get('search');
            $perPage = 25;
            if (!empty($keyword)) {
                $roles = Role::where('name', 'LIKE', "%$keyword%")
                    ->orWhere('department_id', 'LIKE', "%$keyword%")
                    ->orWhere('created_by', 'LIKE', "%$keyword%")
                    ->orWhere('created_at', 'LIKE', "%$keyword%")
                    ->orWhere('updated_at', 'LIKE', "%$keyword%")
                    ->orWhere('deleted_at', 'LIKE', "%$keyword%")
                    ->latest()->paginate($perPage);
            } else {

                $roles = Role::select('roles.*','departments.name as department_name')
                ->join('departments','departments.id','=','roles.department_id')
                ->where(['roles.deleted_at'=> Null,'departments.deleted_at'=>Null])
                ->latest()->paginate($perPage);     
            }
            return view('roles.index', compact('roles'));
        } catch (\Exception $e) {
        Log::critical($e->getMessage());
        app('sentry')->captureException($e);
        return redirect('/roles')->with('danger', 'Something went wrong');
        }      
    }

    
    /**
     * Show the form for creating a new Role.
     *
     * @return \Illuminate\Http\Response
     * Create form to submit record through post 
     */
    public function create()
    {
    try {  
            $department = Department::orderBy('id','asc')->where('deleted_at',null)->get();
            $entity_list = Entity::select('id','type_name')->where('deleted_at',NULL)->get();
            $permission_list = Permission::select('id','name','display_name')->where('deleted_at',NULL)->get();

            if(isset($department) && !empty($department)) {
                return view('roles.create',compact('department','roles_list','entity_list','permission_list'));
            } else {
                return view('roles.create')->with('danger','Data not found');
            }
        } catch (\Exception $e) {
        Log::critical($e->getMessage());
        app('sentry')->captureException($e);
        return redirect('/roles')->with('danger', 'Something went wrong');
        } 
    }

    /**
     * Store a newly created Role in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     * This Function Use To Store Role Data,with manadatory fields for Report Generation.
     * Pseudo Steps:<br>
     * 1) Using validator class fetch inputs from $request and add required fields.<br>
     * 2) If Validation fails return to the same view if validation is success pass array of requested data to create.<br>
     * 3) Redirect to listing page with suscces or error message <br>
     * @param array[] $request request structure to get the post data for storing in to the database
     * 
     * @return json result for success Roles list.
     * 
     * @var array[] $role Should contain list of data return by the query. 
     * @var string $error if any error occur then it will be store in this variable.
     * @var string $validator is used to make the fields as required and if Validation failed flash message of Error will be diplayed
     * @var array[] $requestData to fetch data from request
     * 
     */
    public function store(Request $request)
    {
        
        $this->validate($request,[
            'name'=> 'required',
            'department_id' => 'required',
            'entity_id'=>'required',
            'permissions'=>'required' 
        ]);
        try {
            $user_role = strtolower(trim(str_replace(" ", "_", $request->name)));
            $role = Role::create(['name'=> $user_role,'department_id'=>$request->department_id,'display_name'=>$request->name,'created_by'=>$this->user_id]);
            if(isset($request->entity_id) && count($request->entity_id)>0 && isset($request->permissions) && count($request->permissions)>0 && isset($role->id)) {

                foreach ($request->entity_id as $key => $value) {

                $create_entity = EntityRoleMapper::create(['role_id'=>$role->id,'entity_id'=>$value,'created_by'=>$this->user_id]);
                
                }

                foreach($request->permissions as $key => $val) {
                    $create_permission = PermissionRole::create(['permission_id'=>$val,'role_id'=>$role->id]);

                }
            }      
            
            if(isset($role) && isset($create_permission) && isset($create_entity)) {
                return redirect('/roles')->with('success', 'Role added successfully!');
            } else {
                return redirect('/roles')->with('danger', 'Something went wrong');
            }   
        } catch (\Exception $e) {
        Log::critical($e->getMessage());
        app('sentry')->captureException($e);
        return redirect('/roles')->with('danger', 'Something went wrong');
        }     
    }


    /**
     * Show the form for editing the specified Role.
     * Pseudo step : 1) Retreive data from table against particular id <br> 
     * 2) pass this variable to view <br> 
     * 3) in Value attribute mention the coulmn name to fetch record
     * @param  int  $id
     * @return \Illuminate\Http\Response
     * @var array $role find role id from Model
     * @var array $department_id used to store department id
     * @var string $department_name retrieve data from Model
     */
    public function edit($id)
    {
    try {
            $role=Role::where(['id'=>$id])->first();
            $department = Department::orderBy('id','asc')->where('deleted_at',null)->get();
            $entity_list = Entity::select('id','type_name')->where('deleted_at',NULL)->get();
            $entity_data = EntityRoleMapper::select('*')->where('role_id',$id)->get();
            $permission_list = Permission::select('id','name','display_name')->where('deleted_at',NULL)->get();
            $assigned_permissions=PermissionRole::where(['role_id'=>$id])->get(['permission_id']);
        
            foreach($assigned_permissions as $key => $val)
            {

                $assigned_permissions_array[] = $val['permission_id'];
            }
            return view('roles.edit', compact('role', 'department','entity_list','permission_list','assigned_permissions_array','entity_data'));

        } catch (\Exception $e) {
        Log::critical($e->getMessage());
        app('sentry')->captureException($e);
        return redirect('/roles')->with('danger', 'Something went wrong');
        }     
    }

    /**
     * Update the specified Role in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
       * This Function Use To Update Role Data,with manadatory fields for Report Generation.
     * Pseudo Steps:<br>
     * 1) Using validator class fetch inputs from $request and add required fields.<br>
     * 2) If Validation fails return to the same view if validation is success pass array of requested data to create.<br>
     * 3) Redirect to listing page with suscces or error message <br>
     * @param array[] $request request structure to get the post data for storing in to the database
     * 
     * @return json result for success Role list.
     * 
     * @var array[] $update_office_type Should contain list of data return by the query. 
     * @var string $error if any error occur then it will be store in this variable.
     * @var string $validator is used to make the fields as required and if Validation failed flash message of Error will be diplayed
     * @var array[] $requestData to fetch data from request
     * @var array[] $role to find id from model
     * 
     */
    public function update(Request $request, $id)
    {
      
        $this->validate($request,[
            'name'=> 'required',
            'department_id' => 'required',
            'entity_id'=>'required',
            'permissions'=>'required' 
        ]);
    try {    
            $role = Role::where('id',$id)->update(['name'=>$request->name,'department_id'=>$request->department_id]);
            $delete_entity = EntityRoleMapper::where(['role_id'=>$id])->delete();
            $delete_permission = PermissionRole::where(['role_id'=>$id])->delete();
            if(isset($request->entity_id) && count($request->entity_id)>0 && isset($request->permissions) && count($request->permissions)>0 && isset($delete_permission) && isset($delete_permission)) {

                foreach ($request->entity_id as $key => $value) {
                $create_entity = EntityRoleMapper::create(['role_id'=>$id,'entity_id'=>$value]);
                }

                foreach($request->permissions as $key => $val) {
                    $create_permission = PermissionRole::create(['permission_id'=>$val,'role_id'=>$id]);

                }
            } 

            if(isset($role) && isset($create_entity) && isset($create_permission)) {
                return redirect('/roles')->with('success', 'Role updated successfully!');
            } else {
                return redirect('/roles')->with('danger', 'Something went wrong');
            }   
        } catch (\Exception $e) {
        Log::critical($e->getMessage());
        app('sentry')->captureException($e);
        return redirect('/roles')->with('danger', 'Something went wrong');
        }      
    }
    
    /**
     * Remove the specified Role from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     * @var string $delete_role to find and delete record against particular id  
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
    try {
            if(isset($id) && !empty($id)) {

                $delete_role = Role::where('id',$id)->delete();
                $delete_entity = EntityRoleMapper::where('id',$id)->delete();
                $delete_permission = PermissionRole::where('id',$id)->delete();

                if(isset($delete_data) && isset($delete_entity) && isset($delete_permission)) { 

                  return redirect('/roles')->with('flash_message', 'Role deleted!');

                } else {

                   return redirect('/roles')->with('flash_message', 'Something went wrong while deleteing data.'); 
                }
            } else {
            return redirect('/roles')->with('flash_message', 'Id not found.');
           }
        } catch (\Exception $e) {
        Log::critical($e->getMessage());
        app('sentry')->captureException($e);
        return redirect('/roles')->with('danger', 'Something went wrong');
        }  
    }
}

